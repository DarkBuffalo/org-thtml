(dolist (d '("public_html" "images"))
  (unless (file-exists-p d)
    (make-directory d)))

(dolist (d '(("https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/Person_icon_BLACK-01.svg/200px-Person_icon_BLACK-01.svg.png" "images/me.png")
             ("https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Mini-poodle_companionship.jpg/800px-Mini-poodle_companionship.jpg" "images/a-dog.jpg")
             ("https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Grumpy_Cat_by_Gage_Skidmore.jpg/460px-Grumpy_Cat_by_Gage_Skidmore.jpg" "images/grumpy-cat.jpg")
             ("https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Bengal_tiger_%28Panthera_tigris_tigris%29_female_3_crop.jpg/800px-Bengal_tiger_%28Panthera_tigris_tigris%29_female_3_crop.jpg" "images/tiger.jpg")
             ("https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Strawberry_and_lemon_smoothie_%2814430283996%29.jpg/800px-Strawberry_and_lemon_smoothie_%2814430283996%29.jpg" "recipes/smoothie.jpg")
             ("https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Strawberry_in_Dilshad_Garden%2C_India.jpg/800px-Strawberry_in_Dilshad_Garden%2C_India.jpg" "recipes/strawberries.jpg")))
  (unless (file-exists-p (cadr d))
    (url-copy-file (car d) (cadr d))))

(org-babel-tangle)

(defvar personal-site-full-name "Johnny Nobody"
  "A string with your full name.")

(defvar personal-site-position "Senior programmer"
  "A string with your full position or job appointment.")

(defvar personal-site-github "juanjosegarciaripoll"
  "If not NIL, your GitHub id.")

(defvar personal-site-google-scholar-id nil
  "If not NIL, your Google Scholar id.")

(defvar personal-site-email "nobody@nowhere.org"
  "If not NIL, your Google Scholar id.")

(defvar personal-site-linkedin nil
  "If not NIL, your Linkedin id.")

(defvar personal-site-organization "Emacs"
  "If not NIL, a string with the name of your organization, without the @ sign.")

(defvar personal-site-organization-url "https://www.gnu.org/software/emacs/"
  "If not NIL, the URL of your organization.")

(defvar personal-site-twitter "jjgarciaripoll"
  "If not NIL, a string with a Twitter handle, without the @ sign.")

(setq org-publish-project-alist
      `(("homepage-blog"
         :base-directory ,(expand-file-name "./blog")
         :root-directory ,(expand-file-name "./")
         :recursive t
         :base-extension "org"
         :publishing-directory ,(expand-file-name "./public_html/blog")
         ;; Exclude the blog archive index autogenerated below
         ;; Note that the regexp is relative to :base-directory
         :exclude "^index.org"
         :section-numbers nil
         :with-toc nil
         :with-date nil
         :html-template ,(templated-html-load-template "templates/blog.html")
         :publishing-function org-html-publish-to-templated-html
         :auto-sitemap t
         :sitemap-folders ignore
         :sitemap-style list
         :sitemap-title ,(concat personal-site-full-name "'s blog")
         :sitemap-filename "sitemap.inc"
         :sitemap-sort-files anti-chronologically
         )
        ("homepage-recipes"
         :base-directory ,(expand-file-name "./recipes")
         :root-directory ,(expand-file-name "./")
         :recursive t
         :base-extension "org"
         :publishing-directory ,(expand-file-name "./public_html/recipes")
         ;; Exclude the blog archive index autogenerated below
         ;; Note that the regexp is relative to :base-directory
         :exclude "^\\(index.org\\|*.inc\\)"
         :section-numbers nil
         :with-toc nil
         :with-date nil
         :html-template ,(templated-html-load-template "templates/recipe.html")
         :publishing-function org-html-publish-to-templated-html
         :auto-sitemap t
         :sitemap-folders ignore
         :sitemap-style list
         :sitemap-title ,(concat personal-site-full-name "'s cooking blog")
         :sitemap-filename "recipes.inc"
         :sitemap-sort-files anti-chronologically
         )
        ,(org-simple-rss-alist
          "homepage-rss"
          :base-directory (expand-file-name "./blog")
          :root-directory (expand-file-name "./")
          :recursive t
          :base-extension "org"
          :publishing-directory (expand-file-name "./public_html/blog")
          ;; Exclude the blog archive index autogenerated below
          ;; Note that the regexp is relative to :base-directory
          :exclude "^index.org"
          ;; The location of the RSS file is relative to :base-directory
          ;; Unfortunately, this is a limitation of using org-publish-sitemap
          :rss-filename "rss.xml"
          :rss-title "Juanjo GarcÃ­a-Ripoll's blog"
          :rss-description "My blog of Emacsy things, programming and science"
          :rss-root "https://juanjose.garciaripoll.com/blog/")
        ("homepage-pages"
         :base-directory ,(expand-file-name "./")
         :recursive t
         :base-extension "org"
         :include ("blog/index.org")
         :exclude ,(regexp-opt '("blog" "recipes"))
         :publishing-directory ,(expand-file-name "./public_html")
         :section-numbers nil
         :with-toc nil
         :with-date nil
         :html-template ,(templated-html-load-template "templates/index.html")
         :publishing-function org-html-publish-to-templated-html
         )
        ("homepage-assets"
         :base-directory "./"
         :publishing-directory "./public_html"
         :recursive t
         :exclude "^\\(public_html\\|templates\\).*"
         :base-extension "\\(jpg\\|gif\\|png\\|css\\|js\\|el\\|nb\\|ipynb\\|pdf\\|xml\\)"
         :publishing-function org-publish-attachment)
        ("homepage" :components ("homepage-blog" "homepage-recipes" "homepage-pages"
                                 "homepage-rss" "homepage-assets"))
        ))

(let ((enable-local-variables :all)
      (find-file-hook nil))
  (org-publish "homepage" t))

(templated-html-create-sitemap-xml "public_html/sitemap.xml" "public_html" templated-html-site-url)
